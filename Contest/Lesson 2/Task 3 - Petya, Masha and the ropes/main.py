# Ограничение времени 1 секунда
# Ограничение памяти 512Mb

# На столе лежали две одинаковые верёвочки целой положительной длины.
# Петя разрезал одну из верёвочек на N частей, каждая из которых имеет целую положительную длину,
# так что на столе стало N+1 верёвочек. Затем в комнату зашла Маша и взяла одну из лежащих на столе верёвочек.
# По длинам оставшихся на столе N верёвочек определите, какую наименьшую длину может иметь верёвочка, взятая Машей.
#
# Формат ввода
# Первая строка входных данных содержит одно целое число N — количество верёвочек, оставшихся на столе (2 ≤ N ≤ 1000).
# Во второй строке содержится N целых чисел li — длины верёвочек (1 ≤ li ≤ 1000).
#
# Формат вывода
# Выведите одно целое число — наименьшую длину, которую может иметь верёвочка, взятая Машей.

def find_lenght(lenghts_):
    max_lenght = max(lenghts_)  # максимальная веревочка
    remaining_length = sum(lenghts_) - max_lenght  # оставшаяся длина всех остальных веревочек

    if remaining_length == max_lenght:
        # Большая веревочка равна сумме всех оставшихся, поэтому
        # она является частью порезанной на куски, т.к.
        # Маша не могла взять веревочку длиной 0
        return max_lenght * 2
    if max_lenght > remaining_length:
        # Самая большая веревочка больше всех оставшихся длин,
        # поэтому она и есть та, которую не резали на куски
        return max_lenght - remaining_length
    else:
        # Самая большая веревочка меньше суммы всех оставшихся,
        # значит Маша взяла целую веревочку
        return sum(lenghts_)


with open('input.txt', 'r', encoding='utf-8') as file:
    file.readline()  # количество веревочек нас не интересует, поэтому пропускаем
    ropes = list(map(int, file.readline().split()))

    ans = find_lenght(ropes)
    print(ans)
