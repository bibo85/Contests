# Ограничение времени	1 second
# Ограничение памяти	64Mb
#
# Палиндромом называется строка, которая читается одинаково слева-направо и справа-налево.
# В заданной строке-палиндроме необходимо заменить один символ, чтобы она перестала быть палиндромом.
# При этом полученная строка должна быть лексикографически минимальной.
#
# Строка A лексикографически меньше строки B (той же длины), если на первой различающейся позиции в строке A стоит
# меньший символ, чем в B.
# Например, строка adbc меньше строки adca, т.к. первые два символа в строках совпадают, а на третьем месте в строке
# adbc стоит символ b, который меньше символа c, стоящего на третьей позиции в строке adca.
#
# Формат ввода
# Вводится строка-палиндром, состоящая из маленьких букв латинского алфавита.
# Длина строки не превосходит 1000.
#
# Формат вывода
# Выведите лексикографически минимальную строку, не являющуюся палиндромом, полученную из исходной строки заменой одного
# символа.
# Если получить такую строку невозможно - выведите пустую строку.
#
# Примеры 1
# Входные данные
# abba
#
# Ожидаемый ответ
# aaba
#
# Примеры 1
# Входные данные
# a
#
# Ожидаемый ответ
# # пустая строка


def to_break_pilindrome(palindrome: str) -> str:
    if len(palindrome) == 1:
        return ""

    result = list(palindrome)

    # находим вхождение первой буквы не "а" в половине палиндрома
    for i in range(len(palindrome) // 2):
        if result[i] != "a":
            result[i] = "a"
            break
    # если палиндром состоит из всех "а", то меняем последнюю букву на "b"
    else:
        result[-1] = "b"
    return "".join(result)


text = input()
print(to_break_pilindrome(text))
