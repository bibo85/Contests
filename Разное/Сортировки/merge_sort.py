# Сортировка слиянием
#
# Сортировка слиянием (merge sort) — это алгоритм сортировки, который использует стратегию «разделяй и властвуй».
# Он разбивает список на две половины, рекурсивно сортирует каждую, а затем объединяет их в отсортированный список.
#
# Преимущества сортировки слиянием:
# - Стабильность. Сохраняет относительный порядок элементов с одинаковыми значениями. Если в списке есть элементы с
#   одинаковыми значениями, они останутся в том же порядке, в котором находились в исходном списке.
# - Гарантированная сложность O(n*log n). Это делает алгоритм эффективным для сортировки больших объёмов данных.
# - Применимость для связных структур данных. Хорошо работает с данными, хранящимися в связных структурах, таких как
#   связанные списки, поскольку не требует прямого доступа к элементам по индексу.
#
# Недостатки алгоритма:
# - Дополнительное использование памяти. Требует дополнительной памяти для временного хранения элементов во время
#   слияния. Это может быть проблематично при работе с очень большими наборами данных, особенно если доступ к
#   дополнительной памяти ограничен.
# - Сложность реализации. Алгоритм непросто реализовать, в частности требуется аккуратно управлять процессами
#   разделения и слияния массива.

def merge_sort(lst):
    if len(lst) <= 1:
        return lst

    # разделяем список на две половины
    mid = len(lst) // 2
    left_half = lst[:mid]
    right_half = lst[mid:]

    # рекурсивно сортируем каждую половину
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    # объединяем отсортированные половины в один список
    return merge(left_half, right_half)


def merge(left, right):
    merged = []
    left_index = 0
    right_index = 0

    while left_index < len(left) and right_index < len(right):
        # сравниваем элементы из обоих списков и добавляем меньший в объединенный список
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    # добавляем оставшиеся элементы из левого и правого списков
    merged.extend(left[left_index:])
    merged.extend(right[right_index:])

    return merged


if __name__ == '__main__':
    numbers = [8, 3, 1, 5, 2]
    sorted_numbers = merge_sort(numbers)
    print(sorted_numbers)
